# ml_model.py
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from lightgbm import LGBMRegressor
from sklearn.metrics import mean_absolute_error, r2_score
import joblib

# Step 1: Simulate Dataset (you can later replace with actual campus or weather data)
np.random.seed(42)
n = 1000
data = pd.DataFrame({
    'solar_irradiance': np.random.uniform(0, 1000, n),
    'wind_speed': np.random.uniform(0, 15, n),
    'temperature': np.random.uniform(15, 40, n),
    'humidity': np.random.uniform(20, 90, n),
    'hour': np.random.randint(0, 24, n),
    'day_of_week': np.random.randint(0, 7, n)
})

# Target variables (to predict)
data['solar_generation'] = (
    0.8 * data['solar_irradiance'] -
    5 * (40 - data['temperature']) +
    np.random.normal(0, 30, n)
)

data['campus_demand'] = (
    500 +
    20 * data['hour'] +
    10 * data['temperature'] -
    2 * data['humidity'] +
    np.random.normal(0, 50, n)
)

# Step 2: Train model for solar generation
X = data[['solar_irradiance', 'temperature', 'humidity', 'hour', 'day_of_week']]
y_solar = data['solar_generation']
y_demand = data['campus_demand']

X_train, X_test, y_train_s, y_test_s = train_test_split(X, y_solar, test_size=0.2)
X_train, X_test, y_train_d, y_test_d = train_test_split(X, y_demand, test_size=0.2)

solar_model = LGBMRegressor()
demand_model = LGBMRegressor()

solar_model.fit(X_train, y_train_s)
demand_model.fit(X_train, y_train_d)

# Step 3: Evaluate
solar_preds = solar_model.predict(X_test)
demand_preds = demand_model.predict(X_test)

print("Solar Prediction MAE:", mean_absolute_error(y_test_s, solar_preds))
print("Demand Prediction MAE:", mean_absolute_error(y_test_d, demand_preds))
print("Solar R2:", r2_score(y_test_s, solar_preds))
print("Demand R2:", r2_score(y_test_d, demand_preds))

# Step 4: Save models
joblib.dump(solar_model, 'solar_model.pkl')
joblib.dump(demand_model, 'demand_model.pkl')
print("âœ… Models saved successfully!")
